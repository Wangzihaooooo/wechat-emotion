<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
    <!--xmlns其实是XML Namespace的缩写，可译为“XML命名空间”
        xmlns:namespace-prefix="namespaceURI"。其中namespace-prefix为自定义前缀，只要在这个XML文档中保证前缀不重复即可；namespaceURI是这个前缀对应的XML Namespace的定义
        xmlns:context="http://www.springframework.org/schema/context"
        这一句定义了一个http://www.springframwork.org/schema/context的Namespace（这和Java类中的包的声明很相似），并将其和前缀context绑定。所以上面的Spring XML文档中会有这么一句：
        <context:component-scan base-package="xxx.xxx.controller" />
        这里的<component-scan/>元素就来自别名为context的XML Namespace，也就是在http://www.springframework.org/schema/context中定义的。
        xmlns和xmlns:xsi有什么不同？
        xmlns表示默认的Namespace。例如Spring XML文档中的
        xmlns="http://www.springframework.org/schema/beans"
        这一句表示该文档默认的XML Namespace为http://www.springframwork.org/schema/beans。对于默认的Namespace中的元素，可以不使用前缀。例如Spring XML文档中的
        <bean id="xxx" class="xxx.xxx.xxx.Xxx">
            <property name="xxx" value="xxxx"/>
        </bean>
        xmlns:xsi表示使用xsi作为前缀的Namespace，当然前缀xsi需要在文档中声明。
        xsi:schemaLocation属性其实是Namespace为http://www.w3.org/2001/XMLSchema-instance里的schemaLocation属性，正是因为我们一开始声明了
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        这里才写作xsi:schemaLocation（当然一般都使用这个前缀）。它定义了XML Namespace和对应的 XSD（Xml Schema Definition）文档的位置的关系。它的值由一个或多个URI引用对组成，
        两个URI之间以空白符分隔（空格和换行均可）。第一个URI是定义的 XML Namespace的值，第二个URI给出Schema文档的位置，Schema处理器将从这个位置读取Schema文档，
        该文档的targetNamespace必须与第一个URI相匹配。-->

    <!--context:annotation-config 它的作用是隐式的向Spring容器注册
        AutowiredAnnotationBeanPostProcessor,
    CommonAnnotationBeanPostProcessor,
    PersistenceAnnotationBeanPostProcessor,
    RequiredAnnotationBeanPostProcessor
    这4个BeanPostProcessor.注册这4个bean处理器主要的作用是为了你的系统能够识别相应的注解。-->

    <!--引入jdbc配置文件,整个项目只允许存在一个property-placeholder，否则会重写-->
    <context:property-placeholder location="classpath:sys/db-config.properties" />
    <!-- 1. 数据源 : DriverManagerDataSource -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 2. mybatis 的 SqlSession 的工厂: SqlSessionFactoryBean
    dataSource：引用数据源
    typeAliasesPackage：指定实体类的包名，自动实体类的简单类名映射成别名-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--typeAliasesPackage 默认只能扫描某一个路径下，或以逗号等分割的 几个路径下的内容，不支持通配符和正则，采用重写的方式解决-->
        <property name="typeAliasesPackage" value="com.sys.persistence.domain,
        com.module.spider.persistence.domain,com.module.recognition.persistence.domain"/>
        <!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径。
        *是个通配符，代表所有的文件，**代表所有目录下 -->
        <property name="mapperLocations">
            <array>
                <value>classpath:com/sys/persistence/mapper/**/*.xml</value>
                <value>classpath:com/module/recognition/persistence/mapper/**/*.xml</value>
                <value>classpath:com/module/spider/persistence/mapper/**/*.xml</value>
            </array>
        </property>
    </bean>
    <!-- 3. mybatis 自动扫描加载 Sql 映射文件 : MapperScannerConfigurer
    basePackage：指定sql映射接口类所在的包（自动扫描）,如果它们在SQL映射文件中定义过，则将它们动态定义为一个Spring Bean，这样我们在Service就可直接注入映射接口的bean
    SqlSessionFactoryBean来替代SqlSessionFactoryBuilder来创建SqlSession,接口转换为Spring容器中的Bean
    MapperFactoryBean配置有一个很大的缺点，就是系统有很多的配置文件时 全部需要手动编写，所以上述的方式已经不用了。
    没有必要在 Spring 的 XML 配置文件中注册所有的映射器。相反,你可以使用一个 MapperScannerConfigurer , 它将会查找类路径下的映射器并自动将它们创建成MapperFactoryBean。-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sys.persistence.dao,
        com.module.spider.persistence.dao,com.module.recognition.persistence.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <!-- 4. 事务管理 : DataSourceTransactionManager
    dataSource：引用上面定义的数据源-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 5. 使用声明式事务
    transaction-manager：引用上面定义的事务管理器-->
    <tx:annotation-driven transaction-manager="txManager"/>

    <!-- 拦截器方式配置事物 -->
    <!-- <tx:advice id="transactionAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="append*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="repair" propagation="REQUIRED" />
            <tx:method name="delAndRepair" propagation="REQUIRED" />

            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="load*" propagation="SUPPORTS" />
            <tx:method name="search*" propagation="SUPPORTS" />
            <tx:method name="datagrid*" propagation="SUPPORTS" />

            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.sys.service..*Impl.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>-->

</beans>